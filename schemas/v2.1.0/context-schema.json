{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AI Context Schema",
  "description": "Schema for validating AI Context Schema frontmatter and structure",
  "type": "object",
  "required": ["id", "title", "description", "version", "category", "platforms"],
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^[a-z0-9-]+$",
      "minLength": 1,
      "maxLength": 100,
      "description": "Unique identifier in kebab-case"
    },
    "title": {
      "type": "string",
      "minLength": 1,
      "maxLength": 100,
      "description": "Human-readable title"
    },
    "description": {
      "type": "string",
      "minLength": 10,
      "maxLength": 500,
      "description": "Detailed description of the context schema"
    },
    "version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?(\\+[a-zA-Z0-9-]+)?$",
      "description": "Semantic version number"
    },
    "lastUpdated": {
      "type": "string",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
      "description": "ISO date format (YYYY-MM-DD)"
    },
    "category": {
      "type": "string",
      "enum": ["core", "language", "technology", "stack", "task", "assistant", "tool", "project"],
      "description": "Primary categorization"
    },
    "subcategory": {
      "type": "string",
      "maxLength": 50,
      "description": "Optional fine-grained grouping"
    },
    "framework": {
      "type": "string",
      "maxLength": 50,
      "description": "Specific technology framework"
    },
    "language": {
      "type": "string",
      "maxLength": 30,
      "description": "Programming language"
    },
    "stack": {
      "type": "string",
      "maxLength": 100,
      "description": "Technology stack description"
    },
    "complexity": {
      "type": "string",
      "enum": ["simple", "medium", "complex"],
      "description": "Context schema complexity level"
    },
    "scope": {
      "type": "string",
      "enum": ["file", "component", "feature", "project", "system"],
      "description": "Scope of impact"
    },
    "audience": {
      "type": "string",
      "enum": ["developer", "architect", "team-lead", "junior", "senior", "any"],
      "description": "Target audience"
    },
    "maturity": {
      "type": "string",
      "enum": ["experimental", "beta", "stable", "deprecated"],
      "description": "Context schema maturity level"
    },
    "platforms": {
      "type": "object",
      "properties": {
        "claude-code": { "$ref": "#/definitions/claudePlatform" },
        "claude-desktop": { "$ref": "#/definitions/claudeDesktopPlatform" },
        "cursor": { "$ref": "#/definitions/cursorPlatform" },
        "windsurf": { "$ref": "#/definitions/windsurfPlatform" },
        "windsurf-next": { "$ref": "#/definitions/windsurfNextPlatform" },
        "github-copilot": { "$ref": "#/definitions/copilotPlatform" },
        "vscode": { "$ref": "#/definitions/vscodePlatform" },
        "vscode-insiders": { "$ref": "#/definitions/vscodeInsidersPlatform" },
        "vscodium": { "$ref": "#/definitions/vscodiumPlatform" },
        "zed": { "$ref": "#/definitions/zedPlatform" },
        "jetbrains": { "$ref": "#/definitions/jetbrainsPlatform" },
        "intellij": { "$ref": "#/definitions/intellijPlatform" },
        "webstorm": { "$ref": "#/definitions/webstormPlatform" },
        "pycharm": { "$ref": "#/definitions/pycharmPlatform" },
        "phpstorm": { "$ref": "#/definitions/phpstormPlatform" },
        "rubymine": { "$ref": "#/definitions/rubymineplatform" },
        "clion": { "$ref": "#/definitions/clionPlatform" },
        "datagrip": { "$ref": "#/definitions/datagripPlatform" },
        "goland": { "$ref": "#/definitions/golandPlatform" },
        "rider": { "$ref": "#/definitions/riderPlatform" },
        "android-studio": { "$ref": "#/definitions/androidStudioPlatform" },
        "openai": { "$ref": "#/definitions/openaiPlatform" },
        "generic-ai": { "$ref": "#/definitions/genericAiPlatform" }
      },
      "additionalProperties": { "$ref": "#/definitions/genericPlatform" },
      "minProperties": 1
    },
    "requires": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$"
      },
      "uniqueItems": true,
      "description": "Hard dependencies on other context schemas"
    },
    "suggests": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$"
      },
      "uniqueItems": true,
      "description": "Soft dependencies/recommendations"
    },
    "conflicts": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$"
      },
      "uniqueItems": true,
      "description": "Incompatible context schemas"
    },
    "supersedes": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$"
      },
      "uniqueItems": true,
      "description": "Context schemas this replaces"
    },
    "contentSections": {
      "type": "array",
      "items": { "type": "string" },
      "description": "Expected content organization sections"
    },
    "author": {
      "type": "string",
      "maxLength": 100,
      "description": "Author identifier"
    },
    "contributors": {
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 100
      },
      "uniqueItems": true,
      "description": "List of contributors"
    },
    "tags": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "^[a-z0-9-]+$",
        "maxLength": 30
      },
      "uniqueItems": true,
      "maxItems": 20,
      "description": "Searchable tags"
    },
    "discussionUrl": {
      "type": "string",
      "format": "uri",
      "description": "Community discussion URL"
    },
    "repositoryUrl": {
      "type": "string",
      "format": "uri",
      "description": "Source repository URL"
    },
    "license": {
      "type": "string",
      "description": "License identifier (SPDX format preferred)"
    }
  },
  "definitions": {
    "genericPlatform": {
      "type": "object",
      "required": ["compatible"],
      "properties": {
        "compatible": {
          "type": "boolean",
          "description": "Can this context schema work with this platform?"
        },
        "notes": {
          "type": "string",
          "description": "Platform-specific notes or limitations"
        }
      }
    },
    "claudePlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "memory": {
              "type": "boolean",
              "description": "Should be included in memory files?"
            },
            "command": {
              "type": "boolean",
              "description": "Can become a slash command?"
            },
            "namespace": {
              "type": "string",
              "enum": ["project", "user"],
              "description": "Command namespace"
            },
            "allowedTools": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Claude-specific tool permissions"
            },
            "mcpIntegration": {
              "type": "boolean",
              "description": "Uses MCP servers?"
            },
            "priority": {
              "type": "number",
              "minimum": 1,
              "maximum": 10,
              "description": "Memory priority"
            }
          }
        }
      ]
    },
    "cursorPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "activation": {
              "type": "string",
              "enum": ["auto-attached", "agent-requested", "manual", "always"],
              "description": "How the context schema is activated"
            },
            "globs": {
              "type": "array",
              "items": { "type": "string" },
              "description": "File patterns for auto-attachment"
            },
            "priority": {
              "type": "string",
              "enum": ["high", "medium", "low"],
              "description": "Context schema priority"
            },
            "fileTypes": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Supported file types"
            }
          }
        }
      ]
    },
    "windsurfPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "enum": ["global", "workspace"],
              "description": "Context schema application mode"
            },
            "xmlTag": {
              "type": "string",
              "description": "XML tag for Windsurf formatting"
            },
            "characterLimit": {
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "description": "Estimated character usage"
            },
            "priority": {
              "type": "number",
              "minimum": 1,
              "maximum": 10,
              "description": "Context priority"
            }
          }
        }
      ]
    },
    "copilotPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "priority": {
              "type": "number",
              "minimum": 1,
              "maximum": 10,
              "description": "Priority for guideline selection"
            },
            "reviewType": {
              "type": "string",
              "enum": ["security", "performance", "code-quality", "style", "general"],
              "description": "Type of review focus"
            },
            "scope": {
              "type": "string",
              "enum": ["repository", "organization"],
              "description": "Configuration scope"
            }
          }
        }
      ]
    },
    "vscodePlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "extension": {
              "type": "string",
              "description": "Required VS Code extension"
            },
            "settings": {
              "type": "object",
              "description": "VS Code settings integration"
            },
            "commands": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Available commands"
            }
          }
        }
      ]
    },
    "intellijPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "plugin": {
              "type": "string",
              "description": "Required IntelliJ plugin"
            },
            "fileTemplates": {
              "type": "boolean",
              "description": "Uses file templates?"
            },
            "inspections": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Code inspections to enable"
            }
          }
        }
      ]
    },
    "claudeDesktopPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "mcpIntegration": {
              "type": "boolean",
              "description": "Uses MCP servers?"
            },
            "rules": {
              "type": "boolean",
              "description": "Should be included in rules folder?"
            },
            "priority": {
              "type": "number",
              "minimum": 1,
              "maximum": 10,
              "description": "Context priority"
            }
          }
        }
      ]
    },
    "windsurfNextPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "enum": ["global", "workspace"],
              "description": "Context schema application mode"
            },
            "xmlTag": {
              "type": "string",
              "description": "XML tag for Windsurf Next formatting"
            },
            "characterLimit": {
              "type": "number",
              "minimum": 0,
              "maximum": 10000,
              "description": "Estimated character usage"
            },
            "priority": {
              "type": "number",
              "minimum": 1,
              "maximum": 10,
              "description": "Context priority"
            }
          }
        }
      ]
    },
    "vscodeInsidersPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "extension": {
              "type": "string",
              "description": "Required VS Code Insiders extension"
            },
            "settings": {
              "type": "object",
              "description": "VS Code Insiders settings integration"
            },
            "commands": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Available commands"
            },
            "mcpIntegration": {
              "type": "boolean",
              "description": "Uses MCP servers?"
            }
          }
        }
      ]
    },
    "vscodiumPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "extension": {
              "type": "string",
              "description": "Required VSCodium extension"
            },
            "settings": {
              "type": "object",
              "description": "VSCodium settings integration"
            },
            "commands": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Available commands"
            },
            "configPath": {
              "type": "string",
              "description": "Configuration path (.vscode-oss/)"
            }
          }
        }
      ]
    },
    "zedPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "mode": {
              "type": "string",
              "enum": ["global", "project"],
              "description": "Configuration scope"
            },
            "aiFeatures": {
              "type": "boolean",
              "description": "Uses Zed AI features?"
            },
            "collaborative": {
              "type": "boolean",
              "description": "Supports collaborative features?"
            },
            "performance": {
              "type": "string",
              "enum": ["high", "medium", "low"],
              "description": "Performance optimization level"
            }
          }
        }
      ]
    },
    "jetbrainsPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "ide": {
              "type": "string",
              "enum": ["intellij", "webstorm", "pycharm", "phpstorm", "rubymine", "clion", "datagrip", "goland", "rider", "android-studio"],
              "description": "Specific JetBrains IDE"
            },
            "plugin": {
              "type": "string",
              "description": "Required JetBrains plugin"
            },
            "mcpIntegration": {
              "type": "boolean",
              "description": "Uses MCP servers (2025.1+)?"
            },
            "fileTemplates": {
              "type": "boolean",
              "description": "Uses file templates?"
            },
            "inspections": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Code inspections to enable"
            }
          }
        }
      ]
    },
    "webstormPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "nodeIntegration": {
              "type": "boolean",
              "description": "Uses Node.js integration?"
            },
            "typescript": {
              "type": "boolean",
              "description": "TypeScript support enabled?"
            }
          }
        }
      ]
    },
    "pycharmPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "pythonInterpreter": {
              "type": "boolean",
              "description": "Uses Python interpreter configuration?"
            },
            "virtualEnv": {
              "type": "boolean",
              "description": "Virtual environment support?"
            }
          }
        }
      ]
    },
    "phpstormPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "phpVersion": {
              "type": "string",
              "description": "Required PHP version"
            },
            "composer": {
              "type": "boolean",
              "description": "Uses Composer integration?"
            }
          }
        }
      ]
    },
    "rubymineplatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "rubyVersion": {
              "type": "string",
              "description": "Required Ruby version"
            },
            "rails": {
              "type": "boolean",
              "description": "Ruby on Rails support?"
            }
          }
        }
      ]
    },
    "clionPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "cmake": {
              "type": "boolean",
              "description": "Uses CMake integration?"
            },
            "debugger": {
              "type": "boolean",
              "description": "Debugger configuration?"
            }
          }
        }
      ]
    },
    "datagripPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "databases": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Supported database types"
            },
            "sqlDialect": {
              "type": "string",
              "description": "SQL dialect configuration"
            }
          }
        }
      ]
    },
    "golandPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "goVersion": {
              "type": "string",
              "description": "Required Go version"
            },
            "modules": {
              "type": "boolean",
              "description": "Go modules support?"
            }
          }
        }
      ]
    },
    "riderPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "dotnetVersion": {
              "type": "string",
              "description": "Required .NET version"
            },
            "unity": {
              "type": "boolean",
              "description": "Unity integration?"
            }
          }
        }
      ]
    },
    "androidStudioPlatform": {
      "allOf": [
        { "$ref": "#/definitions/jetbrainsPlatform" },
        {
          "type": "object",
          "properties": {
            "androidSdk": {
              "type": "string",
              "description": "Required Android SDK version"
            },
            "gradleVersion": {
              "type": "string",
              "description": "Required Gradle version"
            }
          }
        }
      ]
    },
    "openaiPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "apiVersion": {
              "type": "string",
              "description": "OpenAI API version"
            },
            "model": {
              "type": "string",
              "enum": ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"],
              "description": "OpenAI model to use"
            },
            "status": {
              "type": "string",
              "enum": ["deprecated", "limited", "active"],
              "description": "Platform status"
            }
          }
        }
      ]
    },
    "genericAiPlatform": {
      "allOf": [
        { "$ref": "#/definitions/genericPlatform" },
        {
          "type": "object",
          "properties": {
            "configPath": {
              "type": "string",
              "description": "Configuration folder path (.ai/)"
            },
            "rulesPath": {
              "type": "string",
              "description": "Rules folder path (.ai/rules/)"
            },
            "priority": {
              "type": "number",
              "minimum": 1,
              "maximum": 10,
              "description": "Context priority"
            }
          }
        }
      ]
    }
  }
}
